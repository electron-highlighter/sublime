{
    "name": "Electron Highlighter",
    "variables": {
        "mono_1": "#1d232f",
        "mono_2": "#506686",
        "mono_3": "#a8b5d1",
        "red": "#ff5874",
        "orange": "#ffbf7a",
        "yellow": "#fffa9e",
        "green": "#6af699",
        "blue": "#82aaff",
        "purple": "#c792ea",
        "cyan": "#4ff2f8"
    },
    "globals":
    {
        "background": "var(mono_1)",
        "foreground": "var(mono_3)",
        "caret": "#34febb",
        "line_highlight": "#ffffff19",
        "selection": "#67769660",
        "line_diff_added": "hsl(150, 60%, 54%)",
        "line_diff_modified": "hsl(40, 60%, 70%)",
        "line_diff_deleted": "hsl(0, 70%, 60%)",
        "brackets_options": "underline",
        "brackets_foreground": "var(blue)",
        "brackets_contents_options": "underline",
        "brackets_contents_foreground": "var(blue)"
    },
    "rules": [
        {
            "name": "Changed",
            "scope": "markup.changed, meta.diff.header.git, meta.diff.header.from-file, meta.diff.header.to-file",
            "foreground": "#a2bffc",
            "font_style": "italic"
        },
        {
            "name": "Deleted",
            "scope": "markup.deleted.diff",
            "foreground": "var(red)",
            "font_style": "italic"
        },
        {
            "name": "Inserted",
            "scope": "markup.inserted.diff",
            "foreground": "var(green)",
            "font_style": "italic"
        },
        {
            "name": "Comment",
            "scope": "comment",
            "foreground": "var(mono_2)",
            "font_style": "italic"
        },
        {
            "name": "String",
            "scope": "string",
            "foreground": "var(green)"
        },
        {
            "name": "String Quoted",
            "scope": "string.quoted, variable.other.readwrite.js",
            "foreground": "var(green)"
        },
        {
            "name": "String Unquoted",
            "scope": "string.unquoted",
            "foreground": "var(mono_3)"
        },
        {
            "name": "Support Constant Math",
            "scope": "support.constant.math",
            "foreground": "var(orange)"
        },
        {
            "name": "Number",
            "scope": "constant.numeric, constant.character.numeric",
            "foreground": "var(orange)",
            "font_style": ""
        },
        {
            "name": "Built-in constant",
            "scope": "constant.language, punctuation.definition.constant, variable.other.constant",
            "foreground": "var(blue)"
        },
        {
            "name": "User-defined constant",
            "scope": "constant.character, constant.other",
            "foreground": "var(blue)"
        },
        {
            "name": "Constant Character Escape",
            "scope": "constant.character.escape",
            "foreground": "var(orange)"
        },
        {
            "name": "RegExp String",
            "scope": "string.regexp, string.regexp keyword.other",
            "foreground": "var(blue)"
        },
        {
            "name": "Commas in functions and JS",
            "scope": "meta.function punctuation.separator.comma, punctuation.separator.comma.js, punctuation.separator.parameter.js, punctuation.separator.key-value",
            "foreground": "var(mono_3)"
        },
        {
            "name": "Variable",
            "scope": "variable",
            "foreground": "var(green)"
        },
        {
            "name": "Keyword",
            "scope": "punctuation.accessor, keyword",
            "foreground": "var(mono_3)",
            "font_style": ""
        },
        {
            "name": "Storage",
            "scope": "storage, meta.var.expr, meta.class meta.method.declaration meta.var.expr storage.type.js",
            "foreground": "var(purple)",
            "font_style": ""
        },
        {
            "name": "Storage type",
            "scope": "storage.type",
            "foreground": "var(purple)"
        },
        {
            "name": "Storage type",
            "scope": "storage.type.function.arrow.js",
            "font_style": ""
        },
        {
            "name": "Storage modifier",
            "scope": "storage.modifier",
            "foreground": "var(purple)",
            "font_style": ""
        },
        {
            "name": "Class name",
            "scope": "entity.name.class, meta.class entity.name.type.class",
            "foreground": "var(yellow)"
        },
        {
            "name": "Inherited class",
            "scope": "entity.other.inherited-class",
            "foreground": "var(green)"
        },
        {
            "name": "Function name",
            "scope": "entity.name.function",
            "foreground": "var(blue)",
            "font_style": ""
        },
        {
            "name": "Meta Tag",
            "scope": "punctuation.definition.tag, meta.tag",
            "foreground": "var(mono_3)"
        },
        {
            "name": "HTML Tag names",
            "scope": "entity.name.tag, meta.tag.other.js, meta.tag.other.tsx, entity.name.tag.tsx, entity.name.tag.js, entity.name.tag.js.jsx, entity.name.tag, meta.tag.js, meta.tag.tsx, meta.tag.html",
            "foreground": "var(red)",
            "font_style": ""
        },
        {
            "name": "Tag attribute",
            "scope": "entity.other.attribute-name",
            "font_style": "",
            "foreground": "var(orange)"
        },
        {
            "name": "Entity Name Tag Custom",
            "scope": "entity.name.tag.custom",
            "foreground": "var(green)"
        },
        {
            "name": "Library (function & constant)",
            "scope": "support.function, support.constant",
            "foreground": "var(blue)"
        },
        {
            "name": "Support Constant Property Value meta",
            "scope": "support.constant.meta.property-value",
            "foreground": "var(cyan)"
        },
        {
            "name": "Library class/type",
            "scope": "support.type",
            "foreground": "var(red)"
        },
        {
            "name": "Support Variable DOM",
            "scope": "support.variable.dom",
            "foreground": "var(red)"
        },
        {
            "name": "Invalid",
            "scope": "invalid",
            "foreground": "#ff2c83"
        },
        {
            "name": "Invalid deprecated",
            "scope": "invalid.deprecated",
            "foreground": "#d6465e"
        },
        {
            "name": "Keyword Operator",
            "scope": "keyword.operator",
            "foreground": "var(cyan)",
            "font_style": ""
        },
        {
            "name": "Keyword Operator Relational",
            "scope": "keyword.operator.relational",
            "foreground": "var(cyan)",
            "font_style": "italic"
        },
        {
            "name": "Keyword Operator Assignment",
            "scope": "keyword.operator.assignment",
            "foreground": "var(cyan)"
        },
        {
            "name": "Keyword Operator Arithmetic",
            "scope": "keyword.operator.arithmetic",
            "foreground": "var(cyan)"
        },
        {
            "name": "Keyword Operator Bitwise",
            "scope": "keyword.operator.bitwise",
            "foreground": "var(cyan)"
        },
        {
            "name": "Keyword Operator Increment",
            "scope": "keyword.operator.increment",
            "foreground": "var(cyan)"
        },
        {
            "name": "Keyword Operator Module",
            "scope": "keyword.operator.module",
            "foreground": "var(purple)"
        },
        {
            "name": "Keyword Operator Ternary",
            "scope": "keyword.operator.ternary",
            "foreground": "var(cyan)"
        },
        {
            "name": "Keyword Operator Expression",
            "scope": "keyword.operator.expression",
            "foreground": "var(purple)"
        },
        {
            "name": "Double-Slashed Comment",
            "scope": "comment.line.double-slash",
            "foreground": "var(mono_2)"
        },
        {
            "name": "Object",
            "scope": "object",
            "foreground": "var(mono_3)"
        },
        {
            "name": "null",
            "scope": "constant.language.null",
            "foreground": "var(red)"
        },
        {
            "name": "Meta Brace",
            "scope": "meta.brace",
            "foreground": "var(mono_3)"
        },
        {
            "name": "Meta Object/Array Binding (destructuring)",
            "scope": "meta.object-binding-pattern-variable.js, meta.array-binding-pattern-variable.js, punctuation.definition.binding-pattern.object.js",
            "foreground": "var(mono_3)"
        },
        {
            "name": "Meta Delimiter Period",
            "scope": "meta.delimiter.period",
            "foreground": "var(mono_3)",
            "font_style": "italic"
        },
        {
            "name": "Meta Object Literal Key",
            "scope": "meta.object-literal.key",
            "foreground": "var(mono_3)"
        },
        {
            "name": "Punctuation Definition String",
            "scope": "punctuation.definition.string",
            "foreground": "var(green)"
        },
        {
            "name": "Punctuation Definition Block",
            "scope": "punctuation.definition.block",
            "foreground": "var(mono_3)"
        },
        {
            "name": "Punctuation Definition Template Expression",
            "scope": "punctuation.definition.template-expression.begin, punctuation.definition.template-expression.end",
            "foreground": "var(red)"
        },
        {
            "name": "Boolean",
            "scope": "constant.language.boolean",
            "foreground": "var(red)"
        },
        {
            "name": "Object Comma",
            "scope": "object.comma",
            "foreground": "var(mono_3)"
        },
        {
            "name": "Variable Parameter Function",
            "scope": "variable.parameter.function",
            "foreground": "var(cyan)",
            "font_style": ""
        },
        {
            "name": "Support Type Property Name & entity name tags",
            "scope": "support.type.vendor.property-name, support.constant.vendor.property-value, support.type.property-name, meta.property-list entity.name.tag",
            "foreground": "var(cyan)",
            "font_style": ""
        },
        {
            "name": "Entity Name tag reference in stylesheets",
            "scope": "meta.property-list entity.name.tag.reference",
            "foreground": "var(cyan)"
        },
        {
            "name": "Constant Other Color RGB Value Punctuation Definition Constant",
            "scope": "constant.other.color.rgb-value punctuation.definition.constant",
            "foreground": "var(orange)"
        },
        {
            "name": "Constant Other Color",
            "scope": "constant.other.color, constant.other.rgb-value, constant.other.color.rgb-value",
            "foreground": "var(yellow)"
        },
        {
            "name": "Keyword Other Unit",
            "scope": "keyword.other.unit",
            "foreground": "var(yellow)"
        },
        {
            "name": "Meta Selector",
            "scope": "meta.selector",
            "foreground": "var(purple)",
            "font_style": "italic"
        },
        {
            "name": "Entity Other Attribute Name Id",
            "scope": "entity.other.attribute-name.id",
            "foreground": "var(blue)"
        },
        {
            "name": "Meta Property Name",
            "scope": "meta.property-name",
            "foreground": "var(cyan)"
        },
        {
            "name": "Doctypes",
            "scope": "entity.name.tag.doctype, meta.tag.sgml.doctype",
            "foreground": "var(purple)",
            "font_style": "italic"
        },
        {
            "name": "Punctuation Definition Parameters",
            "scope": "punctuation.definition.parameters",
            "foreground": "var(mono_3)"
        },
        {
            "name": "Keyword Control Operator",
            "scope": "keyword.control.operator",
            "foreground": "var(cyan)"
        },
        {
            "name": "Keyword Operator Logical",
            "scope": "keyword.operator.logical",
            "foreground": "var(purple)",
            "font_style": ""
        },
        {
            "name": "Variable Instances",
            "scope": "variable.instance, variable.other.instance, variable.readwrite.instance, variable.other.readwrite.instance",
            "foreground": "var(cyan)"
        },
        {
            "name": "Variable Property Other properties",
            "scope": "variable.other.object.property, variable.other.property",
            "foreground": "var(red)",
            "font_style": ""
        },
        {
            "name": "Variable Property Other object",
            "scope": "variable.other.object.js",
            "foreground": "var(mono_3)"
        },
        {
            "name": "Variable Property Other Class",
            "scope": "variable.other.class.js",
            "foreground": "var(mono_3)"
        },
        {
            "name": "Entity Name Function",
            "scope": "entity.name.function",
            "foreground": "var(blue)",
            "font_style": ""
        },
        {
            "name": "Keyword Operator Comparison, imports, returns and Keyword Operator Ruby",
            "scope": "keyword.operator.comparison, keyword.control.flow.js, keyword.control.flow.tsx, keyword.control.ruby, keyword.control.module.ruby, keyword.control.class.ruby, keyword.control.def.ruby, keyword.control.loop.js, keyword.control.import.js, keyword.control.import.ts, keyword.control.import.tsx, keyword.control.from.js, keyword.control.from.ts, keyword.control.from.tsx",
            "foreground": "var(purple)",
            "font_style": ""
        },
        {
            "name": "Keyword Control Conditional",
            "scope": "keyword.control.conditional.js",
            "foreground": "var(purple)",
            "font_style": ""
        },
        {
            "name": "Support Constant, `new` keyword, Special Method Keyword, `debugger`, other keywords",
            "scope": "support.constant, keyword.other.special-method, keyword.other.new, keyword.operator.new, keyword.other.debugger, keyword.control",
            "foreground": "var(purple)"
        },
        {
            "name": "Invalid Broken",
            "scope": "invalid.broken",
            "foreground": "var(orange)"
        },
        {
            "name": "Invalid Unimplemented",
            "scope": "invalid.unimplemented",
            "foreground": "var(orange)"
        },
        {
            "name": "Invalid Illegal",
            "scope": "invalid.illegal",
            "foreground": "var(red)"
        },
        {
            "name": "Language Variable",
            "scope": "variable.language",
            "foreground": "var(mono_3)"
        },
        {
            "name": "Support Variable Property",
            "scope": "support.variable.property",
            "foreground": "var(cyan)"
        },
        {
            "name": "Variable Function",
            "scope": "variable.function",
            "foreground": "var(blue)"
        },
        {
            "name": "Variable Interpolation",
            "scope": "variable.interpolation",
            "foreground": "var(red)"
        },
        {
            "name": "Meta Function Call",
            "scope": "meta.function-call",
            "foreground": "var(blue)"
        },
        {
            "name": "Function Parenthesis",
            "scope": "meta.group.braces.round.function.arguments.js",
            "foreground": "var(mono_3)"
        },
        {
            "name": "Punctuation Section Embedded",
            "scope": "punctuation.section.embedded",
            "foreground": "var(red)"
        },
        {
            "name": "Punctuation Tweaks",
            "scope": "punctuation.terminator.expression, punctuation.definition.arguments, punctuation.definition.array, punctuation.section.array, meta.array",
            "foreground": "var(mono_3)"
        },
        {
            "name": "More Punctuation Tweaks",
            "scope": "punctuation.definition.list.begin, punctuation.definition.list.end, punctuation.separator.arguments, punctuation.definition.list",
            "foreground": "var(green)"
        },
        {
            "name": "Template Strings",
            "scope": "string.template meta.template.expression",
            "foreground": "#d6465e"
        },
        {
            "name": "Backtics(``) in Template Strings",
            "scope": "string.template punctuation.definition.string",
            "foreground": "var(green)"
        },
        {
            "name": "Italics",
            "scope": "italic",
            "foreground": "var(purple)",
            "font_style": "italic"
        },
        {
            "name": "Bold",
            "scope": "bold",
            "foreground": "var(green)",
            "font_style": "bold"
        },
        {
            "name": "Quote",
            "scope": "quote",
            "foreground": "var(mono_3)",
            "font_style": "italic"
        },
        {
            "name": "Raw Code",
            "scope": "raw",
            "foreground": "var(cyan)"
        },
        {
            "name": "CoffeScript Variable Assignment",
            "scope": "variable.assignment.coffee",
            "foreground": "var(cyan)"
        },
        {
            "name": "CoffeScript Parameter Function",
            "scope": "variable.parameter.function.coffee",
            "foreground": "var(mono_3)"
        },
        {
            "name": "CoffeeScript Assignments",
            "scope": "variable.assignment.coffee",
            "foreground": "var(cyan)"
        },
        {
            "name": "C# Readwrite Variables",
            "scope": "variable.other.readwrite.cs",
            "foreground": "var(mono_3)"
        },
        {
            "name": "C# Classes & Storage types",
            "scope": "entity.name.type.class.cs, storage.type.cs",
            "foreground": "var(purple)"
        },
        {
            "name": "C# Namespaces",
            "scope": "entity.name.type.namespace.cs",
            "foreground": "var(mono_3)"
        },
        {
            "name": "Tag names in Stylesheets",
            "scope": "entity.name.tag.css, entity.name.tag.less, entity.name.tag.custom.css, support.constant.property-value.css",
            "foreground": "var(red)",
            "font_style": ""
        },
        {
            "name": "Wildcard(*) selector in Stylesheets",
            "scope": "entity.name.tag.wildcard.css, entity.name.tag.wildcard.less, entity.name.tag.wildcard.scss, entity.name.tag.wildcard.sass",
            "foreground": "var(cyan)"
        },
        {
            "name": "CSS Keyword Other Unit",
            "scope": "keyword.other.unit.css",
            "foreground": "var(yellow)"
        },
        {
            "name": "Attribute Name for CSS",
            "scope": "meta.attribute-selector.css entity.other.attribute-name.attribute, entity.other.attribute-name.class.css, variable.other.readwrite.js",
            "foreground": "var(orange)"
        },
        {
            "name": "ID selector for CSS",
            "scope": "entity.other.attribute-name.id.css",
            "foreground": "var(blue)"
        },
        {
            "name": "Property Values for CSS",
            "scope": "support.constant.font-name, support.constant.color" ,
            "foreground": "var(orange)"
        },
        {
            "name": "Elixir Classes",
            "scope": "source.elixir support.type.elixir, source.elixir meta.module.elixir entity.name.class.elixir",
            "foreground": "var(blue)"
        },
        {
            "name": "Elixir Functions",
            "scope": "source.elixir entity.name.function",
            "foreground": "var(green)"
        },
        {
            "name": "Elixir Constants",
            "scope": "source.elixir constant.other.symbol.elixir, source.elixir constant.other.keywords.elixir",
            "foreground": "var(blue)"
        },
        {
            "name": "Elixir String Punctuations",
            "scope": "source.elixir punctuation.definition.string",
            "foreground": "var(green)"
        },
        {
            "name": "Elixir",
            "scope": "source.elixir variable.other.readwrite.module.elixir, source.elixir variable.other.readwrite.module.elixir punctuation.definition.variable.elixir",
            "foreground": "var(green)"
        },
        {
            "name": "Elixir Binary Punctuations",
            "scope": "source.elixir .punctuation.binary.elixir",
            "foreground": "var(purple)",
            "font_style": "italic"
        },
        {
            "name": "Go Function Calls",
            "scope": "source.go meta.function-call.go",
            "foreground": "#bcc9e4"
        },
        {
            "name": "ID Attribute Name in HTML",
            "scope": "entity.other.attribute-name.id.html",
            "foreground": "var(orange)"
        },
        {
            "name": "HTML Punctuation Definition Tag",
            "scope": "punctuation.definition.tag.html, punctuation.definition.tag.begin.html, punctuation.definition.tag.end.html, punctuation.definition.string.begin.html, punctuation.definition.string.end.html",
            "foreground": "var(mono_3)"
        },
        {
            "name": "HTML Doctype",
            "scope": "meta.tag.sgml.doctype.html",
            "foreground": "var(purple)",
            "font_style": "italic"
        },
        {
            "name": "JavaScript Classes",
            "scope": "meta.class entity.name.type.class.js, support.class.builtin.js",
            "foreground": "var(yellow)"
        },
        {
            "name": "JavaScript Class Instance Constructor",
            "scope": "meta.class.js meta.instance.constructor.js",
            "foreground": "var(yellow)"
        },
        {
            "name": "JavaScript Method Declaration e.g. `constructor`",
            "scope": "meta.method.declaration storage.type.js",
            "foreground": "var(blue)",
            "font_style": ""
        },
        {
            "name": "JavaScript Variable Declaration e.g. `let`, `const`",
            "scope": "meta.method.declaration meta.var.expr.js storage.type.js",
            "foreground": "var(purple)",
            "font_style": ""
        },
        {
            "name": "JavaScript Class declaration",
            "scope": "storage.type.class.js",
            "foreground": "var(purple)",
            "font_style": ""
        },
        {
            "name": "JavaScript Terminator",
            "scope": "terminator.js",
            "foreground": "var(mono_3)"
        },
        {
            "name": "JavaScript Meta Punctuation Definition",
            "scope": "meta.js punctuation.definition.js",
            "foreground": "var(mono_3)"
        },
        {
            "name": "Entity Names in Code Documentations",
            "scope": "entity.name.type.instance.jsdoc, entity.name.type.instance.phpdoc",
            "foreground": "var(mono_3)"
        },
        {
            "name": "Other Variables in Code Documentations",
            "scope": "variable.other.jsdoc, variable.other.phpdoc",
            "foreground": "var(blue)"
        },
        {
            "name": "JavaScript module imports and exports",
            "scope": "variable.other.meta.import.js, meta.import.js variable.other, variable.other.meta.export.js, meta.export.js variable.other",
            "foreground": "var(mono_3)"
        },
        {
            "name": "JavaScript module import/export all",
            "scope": "constant.language.import-export-all.js",
            "foreground": "var(cyan)"
        },
        {
            "name": "JavaScript Variable Parameter Function",
            "scope": "variable.parameter.function.js",
            "foreground": "var(mono_3)"
        },
        {
            "name": "JavaScript[React] Variable Other Object",
            "scope": "variable.other.object.js, variable.other.object.jsx, variable.object.property.js, variable.object.property.jsx",
            "foreground": "var(mono_3)"
        },
        {
            "name": "JavaScript Variables",
            "scope": "variable.js, variable.other.js, variable.other.constant.js",
            "foreground": "var(mono_3)"
        },
        {
            "name": "JavaScript Entity Name Type",
            "scope": "entity.name.type.js, entity.name.type.module.js",
            "foreground": "var(yellow)",
            "font_style": ""
        },
        {
            "name": "JavaScript Support Classes",
            "scope": "support.class.js",
            "foreground": "var(mono_3)"
        },
        {
            "name": "JavaScript Console Class",
            "scope": "support.class.console.js, support.type.object.console.js",
            "foreground": "var(yellow)"
        },
        {
            "name": "JavaScript Console Function",
            "scope": "support.function.console.js",
            "foreground": "var(cyan)"
        },
        {
            "name": "JSON Curly Brackets",
            "scope": "source.json meta.structure.dictionary.json punctuation.definition.dictionary",
            "foreground": "var(mono_3)"
        },
        {
            "name": "JSON Array Brackets",
            "scope": "source.json meta.structure.dictionary.json punctuation.definition.array",
            "foreground": "var(mono_3)"
        },
        {
            "name": "JSON Punctuation Separators (commas, colons)",
            "scope": "source.json meta.structure.dictionary.json punctuation.separator",
            "foreground": "var(mono_3)"
        },
        {
            "name": "JSON Property Names",
            "scope": "meta.mapping.key, meta.mapping.key string.quoted.double, meta.mapping.value meta.mapping.key, meta.mapping.value meta.mapping.key string.quoted.double",
            "foreground": "var(blue)"
        },
        {
            "name": "Quotes on JSON Property Names",
            "scope": "meta.mapping.key punctuation.definition.string",
            "foreground": "var(blue)"
        },
        {
            "name": "JSON Support Constants",
            "scope": "support.constant.json",
            "foreground": "var(blue)"
        },
        {
            "name": "JSON Property values (string)",
            "scope": "meta.mapping.value string",
            "foreground": "var(green)"
        },
        {
            "name": "Specific JSON Property values like null",
            "scope": "meta.mapping.value constant.language",
            "foreground": "var(red)"
        },
        {
            "name": "Ruby Variables",
            "scope": "variable.other.ruby",
            "foreground": "var(mono_3)"
        },
        {
            "name": "Ruby Class and Instance Variables",
            "scope": "variable.other.readwrite.instance.ruby, variable.other.readwrite.class.ruby",
            "foreground": "var(red)"
        },
        {
            "name": "Ruby Class",
            "scope":"entity.name.type.class.ruby",
            "foreground": "var(orange)"
        },
        {
            "name": "Ruby Module",
            "scope": "entity.name.type.module.ruby",
            "foreground": "var(yellow)"
        },
        {
            "name": "Ruby Hashkeys",
            "scope": "constant.language.symbol.hashkey.ruby",
            "foreground": "var(cyan)"
        },
        {
            "name": "LESS Tag names",
            "scope": "entity.name.tag.less",
            "foreground": "var(cyan)"
        },
        {
            "name": "LESS Keyword Other Unit",
            "scope": "keyword.other.unit.css",
            "foreground": "var(yellow)"
        },
        {
            "name": "Attribute Name for LESS",
            "scope": "meta.attribute-selector.less entity.other.attribute-name.attribute",
            "foreground": "var(orange)"
        },
        {
            "name": "Markdown Headings",
            "scope": "markup.heading.markdown, markup.heading.1.markdown, markup.heading.2.markdown",
            "foreground": "var(red)"
        },
        {
            "name": "Markdown Italics",
            "scope": "markup.italic.markdown",
            "foreground": "var(purple)",
            "font_style": "italic"
        },
        {
            "name": "Markdown Bold",
            "scope": "markup.bold.markdown, punctuation.definition.bold.markdown",
            "foreground": "var(orange)",
            "font_style": "bold"
        },
        {
            "name": "Markdown Quote + others",
            "scope": "beginning.punctuation.definition.quote.markdown, markup.quote.markdown",
            "foreground": "var(mono_2)",
            "font_style": "italic"
        },
        {
            "name": "Markdown Raw Code + others",
            "scope": "markup.raw.inline.markdown, markup.raw.inline",
            "foreground": "var(green)"
        },
        {
            "name": "Markdown Links",
            "scope": "markup.underline.link.markdown, markup.underline.link.image.markdown",
            "foreground": "var(cyan)"
        },
        {
            "name": "Markdown Link Title and Description",
            "scope": "meta.image.inline.description.markdown, meta.link.inline.description.markdown",
            "foreground": "var(blue)"
        },
        {
            "name": "Markdown Punctuation",
            "scope": "punctuation.definition.string.markdown, punctuation.definition.string.begin.markdown, punctuation.definition.string.end.markdown, meta.link.inline.markdown punctuation.definition.string, punctuation.definition.metadata.markdown",
            "foreground": "var(mono_3)"
        },
        {
            "name": "Markdown List Punctuation",
            "scope": "markup.list.unnumbered.bullet.markdown, markup.list.numbered.bullet.markdown",
            "foreground": "var(red)"
        },
        {
            "name": "PHP Variables",
            "scope": "variable.other.php, variable.other.property.php",
            "foreground": "var(mono_3)"
        },
        {
            "name": "Support Classes in PHP",
            "scope": "support.class.php",
            "foreground": "var(yellow)"
        },
        {
            "name": "Punctuations in PHP function calls",
            "scope": "meta.function-call.php punctuation",
            "foreground": "var(mono_3)"
        },
        {
            "name": "PHP Global Variables",
            "scope": "variable.other.global.php",
            "foreground": "var(green)"
        },
        {
            "name": "Declaration Punctuation in PHP Global Variables",
            "scope": "variable.other.global.php punctuation.definition.variable",
            "foreground": "var(green)"
        },
        {
            "name": "Language Constants in Python",
            "scope": "constant.language.python",
            "foreground": "var(red)"
        },
        {
            "name": "Python Function Parameter and Arguments",
            "scope": "variable.parameter.function.python, meta.function-call.arguments.python",
            "foreground": "var(blue)"
        },
        {
            "name": "Python Function Call",
            "scope": "meta.function-call.python, meta.function-call.generic.python",
            "foreground": "var(mono_3)"
        },
        {
            "name": "Punctuations in Python",
            "scope": "punctuation.python, punctuation.section.arguments.begin.python, punctuation.section.arguments.end.python",
            "foreground": "var(mono_3)"
        },
        {
            "name": "Decorator Functions in Python",
            "scope": "entity.name.function.decorator.python",
            "foreground": "var(green)"
        },
        {
            "name": "Python Language Variable",
            "scope": "source.python variable.language.special",
            "foreground": "var(blue)"
        },
        {
            "name": "LESS Variable",
            "scope": "variable.less, variable.other.less",
            "foreground": "var(red)"
        },
        {
            "name": "SCSS Variable",
            "scope": "variable.scss, variable.sass, variable.declaration.sass, variable.other.sass, source.sass variable, variable.parameter.url.scss, variable.parameter.url.sass",
            "foreground": "var(red)"
        },
        {
            "name": "Variables in SASS At-Rules",
            "scope": "source.css.scss meta.at-rule variable, source.css.sass meta.at-rule variable",
            "foreground": "var(blue)"
        },
        {
            "name": "Variables in SASS At-Rules",
            "scope": "source.css.scss meta.at-rule variable, source.css.sass meta.at-rule variable",
            "foreground": "var(mono_3)"
        },
        {
            "name": "Attribute Name for SASS",
            "scope": "meta.attribute-selector.scss entity.other.attribute-name.attribute, meta.attribute-selector.sass entity.other.attribute-name.attribute",
            "foreground": "var(orange)"
        },
        {
            "name": "Tag names in SASS",
            "scope": "entity.name.tag.scss, entity.name.tag.sass",
            "foreground": "var(cyan)"
        },
        {
            "name": "SASS Keyword Other Unit",
            "scope": "keyword.other.unit.scss, keyword.other.unit.sass",
            "foreground": "var(yellow)"
        },
        {
            "name": "Stylus Variable",
            "scope": "variable.stylus, variable.other.stylus",
            "foreground": "var(red)"
        },
        {
            "name": "TypeScript[React] Variables and Object Properties",
            "scope": "variable.other.readwrite.alias.ts, variable.other.readwrite.alias.tsx, variable.other.readwrite.ts, variable.other.readwrite.tsx, variable.other.object.ts, variable.other.object.tsx, variable.object.property.ts, variable.object.property.tsx, variable.other.ts, variable.other.tsx, variable.tsx, variable.ts",
            "foreground": "var(mono_3)"
        },
        {
            "name": "TypeScript[React] Entity Name Types",
            "scope": "entity.name.type.ts, entity.name.type.tsx",
            "foreground": "var(yellow)"
        },
        {
            "name": "TypeScript[React] Node Classes",
            "scope": "support.class.node.ts, support.class.node.tsx",
            "foreground": "var(blue)"
        },
        {
            "name": "TypeScript[React] Entity Name Types as Parameters",
            "scope": "meta.type.parameters.ts entity.name.type, meta.type.parameters.tsx entity.name.type",
            "foreground": "var(mono_3)"
        },
        {
            "name": "TypeScript[React] Import/Export Punctuations",
            "scope": "meta.import.ts punctuation.definition.block, meta.import.tsx punctuation.definition.block, meta.export.ts punctuation.definition.block, meta.export.tsx punctuation.definition.block",
            "foreground": "var(mono_3)"
        },
        {
            "name": "TypeScript[React] Punctuation Decorators",
            "scope": "meta.decorator punctuation.decorator.ts, meta.decorator punctuation.decorator.tsx",
            "foreground": "var(blue)"
        },
        {
            "name": "TypeScript[React] Punctuation Decorators",
            "scope": "meta.tag.js meta.jsx.children.tsx",
            "foreground": "var(blue)"
        },
        {
            "name": "YAML Entity Name Tags",
            "scope": "entity.name.tag.yaml",
            "foreground": "var(blue)"
        },
        {
            "name": "JavaScript Variable Other ReadWrite",
            "scope": "variable.other.readwrite.js, variable.parameter",
            "foreground": "var(mono_3)"
        },
        {
            "name": "Support Class Component",
            "scope": "support.class.component.js, support.class.component.js.jsx, support.class.component.tsx",
            "foreground": "var(purple)",
            "font_style": ""
        },
        {
            "name": "Text nested in React tags",
            "scope": "meta.jsx.children, meta.jsx.children.js, meta.jsx.children.tsx",
            "foreground": "var(mono_3)"
        },
        {
            "name": "Text in Vue tags",
            "scope": "meta.directive.vue punctuation",
            "foreground": "var(mono_3)"
        },
        {
            "name": "TypeScript Classes",
            "scope": "meta.class entity.name.type.class.tsx",
            "foreground": "var(yellow)"
        },
        {
            "name": "TypeScript Entity Name Type",
            "scope": "entity.name.type.tsx, entity.name.type.module.tsx",
            "foreground": "var(yellow)"
        },
        {
            "name": "TypeScript Method Declaration e.g. `constructor`",
            "scope": "meta.method.declaration storage.type.tsx",
            "foreground": "var(blue)"
        },
        {
            "name": "normalize font style of certain components",
            "scope": "meta.property-list.css meta.property-value.css variable.other.less, meta.property-list.scss variable.scss, meta.property-list.sass variable.sass, meta.brace, keyword.operator.operator, keyword.operator.or.regexp, keyword.operator.expression.in, keyword.operator.relational, keyword.operator.assignment, keyword.operator.comparison, keyword.operator.type, keyword.operator, keyword, punctuation.definintion.string, punctuation, variable.other.readwrite.js, storage.type, source.css, string.quoted",
            "font_style": ""
        }
    ]
}
